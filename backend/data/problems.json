[
  {
    "slug": "two-sum",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "difficulty": "Easy",
    "tags": [
      "Arrays",
      "Hash Table"
    ],
    "solvedBy": [
      "6862cbb695aa9de01ff6fd55"
    ],
    "input": "An array of integers nums and an integer target.",
    "codeStubs": [
      {
        "cpp": "vector<int> twoSum(vector<int>& nums, int target) {\n    // Your code here\n}",
        "java": "public int[] twoSum(int[] nums, int target) {\n    // Your code here\n    return new int[]{0,0};\n}",
        "python": "def two_sum(nums, target):\n    # Your code here\n    pass",
        "js": "function twoSum(nums, target) {\n    // Your code here\n}"
      }
    ],
    "output": [
      {
        "cpp": "vector<int>",
        "java": "int[]",
        "python": "list",
        "js": "array"
      }
    ],
    "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
    "timelimit": 1,
    "createdBy": "admin",
    "testCases": [
      {
        "input": "[2,7,11,15]\n9",
        "output": "[0,1]",
        "sample": true,
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      }
    ]
  },
  {
    "slug": "Add-Two-Numbers",
    "id": "prob002",
    "title": "Add two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Math",
      "Recursion"
    ],
    "solvedBy": [],
    "input": "An array of integers nums and an integer target.",
    "codeStubs": [
      {
        "cpp": "vector<int> twoSum(vector<int>& nums, int target) {\n    // Your code here\n}",
        "java": "public int[] twoSum(int[] nums, int target) {\n    // Your code here\n    return new int[]{0,0};\n}",
        "python": "def two_sum(nums, target):\n    # Your code here\n    pass",
        "js": "function twoSum(nums, target) {\n    // Your code here\n}"
      }
    ],
    "output": [
      {
        "cpp": "vector<int>",
        "java": "int[]",
        "python": "list",
        "js": "array"
      }
    ],
    "constraints": "The number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
    "timelimit": 1,
    "createdBy": "admin",
    "testCases": [
      {
        "input": "l1=[2,4,3],\tl2=[5,6,4]\n9",
        "output": "[7,0,8]",
        "sample": true,
        "explanation": "342+465 = 807"
      }
    ]
  },
  {
    "slug": "Longest-Substring-Without-Repeating-Characters",
    "id": "prob003",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without duplicate characters.",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Table"
    ],
    "solvedBy": [],
    "input": "A string s.",
    "codeStubs": [
      {
        "cpp": "int lengthOfLongestSubstring(string s){\n    // Your code here\n}",
        "java": "public int lengthOfLongestSubstring(String s) {\n    // Your code here\n    return 0;\n}",
        "python": "def length_of_longest_substring(s):\n    # Your code here\n    pass",
        "js": "function lengthOfLongestSubstring(s) {\n    // Your code here\n}"
      }
    ],
    "output": [
      {
        "cpp": "int",
        "java": "int",
        "python": "int",
        "js": "int"
      }
    ],
    "constraints": "0 <= s.length <= 5 * 10^4\ns consists of English letters, digits, symbols and spaces.",
    "timelimit": 1,
    "createdBy": "admin",
    "testCases": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "sample": true,
        "explanation": "The answer is \"abc\" with the length of 3."
      }
    ]
  },
  {
    "slug": "Median-of-Two-Sorted-Arrays",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer"
    ],
    "solvedBy": [],
    "input": "Two sorted arrays nums1 and nums2 of size m and n respectively.",
    "codeStubs": [
      {
        "cpp": "double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2){\n    // Your code here\n}",
        "java": "public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    // Your code here\n    return 0;\n}",
        "python": "def find_median_sorted_arrays(nums1, nums2):\n    # Your code here\n    pass",
        "js": "function findMedianSortedArrays(nums1, nums2) {\n    // Your code here\n}"
      }
    ],
    "output": [
      {
        "cpp": "double",
        "java": "double",
        "python": "double",
        "js": "double"
      }
    ],
    "constraints": "nums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-10^6 <= nums1[i], nums2[i] <= 10^6",
    "timelimit": 1,
    "createdBy": "admin",
    "testCases": [
      {
        "input": "nums1 = [1,3], nums2 = [2]",
        "output": "2.00000",
        "sample": true,
        "explanation": "merged array = [1,2,3] and median is 2."
      }
    ]
  }
]